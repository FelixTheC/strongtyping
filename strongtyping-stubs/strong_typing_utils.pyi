import typing
from _typeshed import Incomplete
from queue import Queue
from strongtyping._utils import ORIGINAL_DUCK_TYPES as ORIGINAL_DUCK_TYPES, install_st_m as install_st_m
from typing import Any

extension_module: bool
empty: Incomplete
default_return_queue: Queue

class TypeMisMatch(AttributeError):
    def __init__(self, message, failed_params: Incomplete | None = ..., param_values: Incomplete | None = ..., annotations: Incomplete | None = ...) -> None: ...

class ValidationError(Exception):
    def __init__(self, message) -> None: ...

typing_base_class: Incomplete

def get_possible_types(typ_to_check, origin_name: str = ...) -> typing.Union[tuple, None]: ...
def get_origins(typ_to_check: Any) -> tuple: ...
def checking_typing_dict(arg: Any, possible_types: tuple, *args): ...
def checking_typing_set(arg: Any, possible_types: tuple, *args, **kwargs): ...
def checking_typing_type(arg: Any, possible_types: tuple, *args, **kwargs): ...
def checking_typing_union(arg: Any, possible_types: tuple, mro, **kwargs): ...
def checking_typing_optional(arg: Any, possible_types: tuple, mro, **kwargs): ...
def checking_typing_iterator(arg: Any, *args, **kwargs): ...
def checking_typing_callable(arg: Any, possible_types: tuple, *args, **kwargs): ...
def checking_typing_tuple(arg: Any, possible_types: tuple, *args, **kwargs): ...
def checking_typing_list(arg: Any, possible_types: tuple, *args, **kwargs): ...
def checking_ellipsis(arg, possible_types, *args, **kwargs): ...
def checking_typing_json(arg, possible_types, *args, **kwargs): ...
def checking_typing_generator(arg, possible_types, *args, **kwargs): ...
def checking_typing_literal(arg, possible_types, *args, **kwargs): ...
def checking_typing_validator(arg, possible_types, *args, **kwargs): ...
def checking_typing_itervalidator(arg, possible_types, *args, **kwargs): ...
def checking_typing_iterable(arg: Any, possible_types: tuple, *args, **kwargs): ...
def checking_typing_typedict_values(args: dict, required_types: dict, total: bool): ...
def checking_typing_class(arg: Any, possible_types: tuple, *args, **kwargs): ...
def checking_typing_typeddict(arg: Any, possible_types: Any, *args, **kwargs): ...
def checking_typing_typeddict_required(arg: Any, possible_types: Any, *args, **kwargs): ...
def checking_typing_typeddict_notrequired(arg: Any, possible_types: Any, *args, **kwargs): ...
def module_checking_typing_list(arg: Any, possible_types: Any): ...
def module_checking_typing_dict(arg: Any, possible_types: Any): ...
def module_checking_typing_set(arg: Any, possible_types: Any): ...
def module_checking_typing_tuple(arg: Any, possible_types: Any): ...
def module_checking_typing_validator(arg, possible_types, *args, **kwargs): ...
def validate_object(value, validation_func: Incomplete | None = ...): ...
def check_duck_typing(arg, possible_types, *args, **kwargs): ...

supported_typings: Incomplete

def check_type(argument, type_of, mro: bool = ..., **kwargs): ...
