import typing
from typing import Any

from strongtyping._utils import action as action, remove_subclass as remove_subclass
from strongtyping.cached_set import CachedSet as CachedSet
from strongtyping.strong_typing import TypeMisMatch as TypeMisMatch

TYPE_EXTRACTION_PATTERN: str
PATTERN_1: str
EXTRACT_PARAM_NAME_PATTERN: str
TUPLE_PATTERN: str
PATTERN: str
OR_PATTERN: str
COMMA_PATTERN: str
REMOVE_PATTERN: str
FM_PATTERN: str

def separate_param_type(docstring_type_part: str) -> tuple: ...

possible_types: Any

def param_attr(attr: str) -> Any: ...
def get_container_types(ttype_of: str) -> typing.Union[None, tuple]: ...
def get_or_types(ttype: str) -> list: ...
def is_tuple(arg: Any, type_of: str) -> Any: ...
def is_list(arg: Any, type_of: str) -> Any: ...
def is_dict(arg: Any, type_of: str) -> Any: ...
def is_set(arg: Any, type_of: str) -> Any: ...
def is_function_or_method_type(arg: Any, type_of: Any): ...

options: Any

def check_doc_str_type(arg: Any, type_of: Any): ...
def is_type_info(docstring_line: str) -> bool: ...
def is_param_info(docstring_line: str) -> bool: ...
def extract_docstring_param_types(func: Any) -> dict: ...
def match_docstring(
    _func: Any = ...,
    *,
    excep_raise: Exception = ...,
    cache_size: Any = ...,
    subclass: bool = ...,
    severity: Any = ...,
    **kwargs: Any,
) -> Any: ...
def match_class_docstring(
    _cls: Any = ...,
    *,
    excep_raise: Exception = ...,
    cache_size: Any = ...,
    severity: Any = ...,
    **kwargs: Any,
) -> Any: ...
def getter(func: Any): ...
def setter(func: Any): ...
def getter_setter(func: Any): ...
