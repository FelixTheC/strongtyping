from _typeshed import Incomplete
from strongtyping.strong_typing_utils import get_origins as get_origins, get_possible_types as get_possible_types

Pattern: Incomplete

def getsource(object): ...

ARGUMENT_TYPE: Incomplete

def union_types(val, type_origins): ...
def get_type_info(val, type_origins): ...
def docs_from_typing_numpy_format(annotations, additional_infos, func_params, remove_linebreak, func_info): ...
def docs_from_typing_reST_format(annotations, additional_infos, func_params, remove_linebreak, func_info): ...
def docs_from_typing(func, remove_linebreak, style): ...
def rest_docs_from_typing(_func: Incomplete | None = ..., *, insert_at: str = ..., remove_linebreak: bool = ...): ...
def numpy_docs_from_typing(_func: Incomplete | None = ..., *, insert_at: str = ..., remove_linebreak: bool = ...): ...
def class_docs_from_typing(_cls: Incomplete | None = ..., *, doc_type: str = ...): ...
