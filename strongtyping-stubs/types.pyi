from _typeshed import Incomplete
from typing import Any, _GenericAlias

class _Validator(_GenericAlias, _root=True):
    def __getitem__(self, item): ...
    def __hash__(self): ...

class _IterValidator(_GenericAlias, _root=True):
    def __getitem__(self, item): ...
    def __hash__(self): ...

def Validator(self, parameters, *args, **kwargs): ...
def IterValidator(self, parameters, *args, **kwargs): ...

class FrozenType:
    weakref: Incomplete
    required_type: Incomplete
    stored_value: Incomplete
    def __init__(self, required_type, stored_value: Incomplete | None = ...) -> None: ...
    def __get__(self, instance: Incomplete | None = ..., owner: Incomplete | None = ...): ...
    def __set__(self, instance: Incomplete | None = ..., value: Incomplete | None = ...) -> None: ...
    def __doc__(self): ...
    @classmethod
    def cast(cls, instance, origin, new): ...
    def error_msg(self, value: Any, attribute_name: str = ...) -> Exception: ...
